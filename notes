========== TODO: remove Technologies model ==============================================
========== TODO: added many to many relationship between Porfolios and Skills ===========
========== TODO: adjust seeds file to include relationship between ports and skills =====
========== TODO: create filter function for portfolio Items on home page ================
TODO: Create animation classes for animating objects on scroll
TODO: Create color change event on scroll that only happens if the skills page it shown for a while
TODO: Create animated slide in to invite people to view "admin" side of site
TODO: Create tour of admin side
TODO: Add active nav bar indicator 
TODO: add actual Portfolio Items to portfolio


# **Duplicate String**

## Ruby

Ruby is easy because you only need to multiply the **string**

```ruby
  def multistring string, count
    string * count
  end
```

## Python

Python is exactly the same as ruby

```python
  def multistring(string, count):
    return string * count
```

## CoffeeScript

CoffeeScript is a bit more difficult.
1.  Just declare a new **array** full of count + 1 _nils_.
2.  Then **join** them with the _string_. This will place one copy of the _string_ in between each one of the _nils_ (_this is why you need an extra one_).
Since the _nils_ wont render to a **string**... You have a duplicated **string**!

```javascript
  repeatStr = (string, count) ->
    Array(count + 1).join(string)
```

## JavaScript

Javascript can be solved in exactly the same way.

```javascript
  function multistring (string, count) {
    return Array(count + 1).join string
  }
```

Or you can simply use **repeat**!

```javascript
  function multistring (string, count) {
    return string.repeat(count)
  }
```

##C Sharp

C# is more complicated

1. First you will need to pull in **Linq**.
2. Call **Enumerable.Repeat** and pass it _str_ and _count_.
3. then we will need to call **string.Concat** and pass it the results of **Repeat** to combine our repeated **strings** together.

```csharp
  using System.Linq;

    public static string multistring(int count, string str)
    {
      return string.Concat(Enumerable.Repeat(str, count));
    }
```

# **Remove All White Space**

##Ruby

Ruby is really easy. You can just use the **string.delete** method to pull out any _' '_.

```ruby
  def nospace(string)
    string.delete(' ')
  end
```
you could remove all of anything with this method

##Python

For Python rather than deleting the spaces, you just **replace** them with an empty string

```python
  def nospace(string)
    return string.replace(" ","")
```

##CoffeeScript

Coffeescript can use a **regex** to replace the space with nothing like this

```javascript
  nospace = (string) ->
    return string.replace(/\s/g,'')
```

But since **regex** are hard to remember (_even if this one is pretty short_) I prefer for use **split** and **join**.
1. You first **split** it by the spaces which will remove them as they are the split point. 
2. You will now have an **array** of the character groups that were separated by a space.
3. Now just **join** the **array** with empty **strings** resulting in a spaceless **string**.

```javascript
  nospace = (string) ->
    return string.split(' ').join('')
```

##JavaScript

Javascript has the same options as Coffeescript but written with JS syntax

```javascript
  function nospace(string) {
    return string.replace(/\s/g,'');
  }
```

and

```javascript
  function nospace(string) {
    return string.split(' ').join('');
  }
```

##C Sharp

C# is the same as python in this case

```csharp
  public static string NoSpace(string str) {
    return str.replace(" ","");
  }
```

#**Add up the contents of an array of inegers**

##Ruby

With Ruby you just want to use either **inject** or **reduce** which will effectivly do the same thing.
All you need to do is pass in the **operator** you will be using preceded by a **:** which in this case it a **+** for adding.
If you look at the solution for C# it will give you a good idea of what Ruby is doing for you automatically.

```ruby
  def sumit(arr) # of integers
    arr.reduce(:+)
  end
```

if you need to add up more than one **array** you could use

```ruby
  def sumit(arr1, arr2)
    (arr1 + arr2).reduce(:+)
  end
```

or

```ruby
  def sumit(arr1, arr2)
    arr1.reduce(:+) + arr2.reduce(:+)
  end
```

The first will combine the **arrays** and then add them up and the second will add them up separately and then add up the totals.

##Python

Doing this in Python is very easy. just use the **sum** method.

```python
  def sumit(arr)
    return sum(arr)
```

since combining **lists** (_Pythons version of array_) in Python is so easy you can solve this with multiple arrays like this.

```python
  def sumit(arr1,arr2)
    return sum(arr1 + arr2)
```

or

```python
  def sumit(arr1,arr2)
    return sum(arr1) + sum(arr2)
```


##Javascript

Ok now for js, this is where we take our first step into something a bit more complicated.
*. First use the **reduce** function in order to do this but you have to tell JS how to use it.
 1. We will first declare the **variables** _total_ & _num_ (_you can name them whatever you like_). (_These will represent the total of whats been summed up so far and the next number in the **array**_.) 
 2. Then we will tell it what to do with those variables which will be _total_ + _num_.
it should look like this.

```javascript
  function sumit(arr) {
     return arr.reduce((total, sum) => total + sum);
  }
```

You can even write a seperate *function* if you want like this.

```javascript
  function useThisToReduce(total, num) {
    return total + num;
  }

  function sumit(arr) {
     return arr.reduce(useThisToReduce)
  }
```

If you have multiple **arrays** you can combine the totals afterwords or you can add the arrays together and then add the totals like this.

```javascript
  function sumit(arr1,arr2) {
     return arr1.concat(arr2).reduce((total, sum) => total + sum);
  }
```

##coffee

CoffeeScript can be done the same way as JS.

```javascript
  sumit = (arr) ->
    return arr.reduce((a,b) => a + b)

```

or for two

```javascript
sumit = (arr1, arr2) ->
  arr1.concat(arr2).reduce((a,b) => a + b)
```

##C Sharp

This with C# takes a little more work.
1. Declare an **int** _total_ set to 0.
2. We will have to use a **foreach loop** to manually add up the items.
3.  Set the **int** _i_ to represent each item of **arr**.
4. Then all we need to do is add that to the **integer** _total_ that we declared outside of the **loop**.
5. Lastly we **return** the _total_.

```csharp
      public static int sumit (int[] arr) {
      int total = 0;
      foreach (int i in arr) { total += i; }
      return total;
    }
```

For multiple **arrays** you will need **System.Linq**.
1. Call **Concat** on _arr1_ and pass it _arr2_.
2. Now you will have an **Enumerable List** rather than an **array** so you will need to call **ToArray** on it to get an **array**.
3. Then just repeat what we did before on that **array**.

```csharp
using System.Linq;

      public static int sumit (int[] arr1, int[] arr2) {
        int[] combined = arr1.Concat(arr2).ToArray();
        int total = 0;
        foreach (int i in combined) { total += i; }
        return total;
    }
```

#**Reverse Sequence**

##Ruby

Ruby is simple as usual. Just create the **array** and then call **reverse**.

```ruby
  def reverse_sequ(number)
    [*1..number].reverse
  end
```

The **splat** (_*_) causes Ruby to create an actual **array** rather than a **range**.

```ruby
  [1..3] # gives [1..3]

  [*1..3] # gives [1,2,3]
```

##Python

For python rather than reversing a **list** made from a **range** we can actually build the **range** backwards.

```python
  def reverse_sequ(number)
    return list(range(1,number,-1))
```

When we declare the **range** the fist agument is where to start, the second is where to end, and the third is the step we take to get there. Since we used -1 on it will step backwards by one when number each time. Then we can call **list** on that to convert it from a range to a list (_Pythons version of an *array*_).

##CoffeeScript

CoffeeScript is the easiest one this time. You just declare the **array** backwards.

```javascript
  reverse_sequ = (number) ->
    return [number..1]
```

##JavaScript

For JS we will have to do this munaully again.
1. First we declare a **block variable** called _arr_ with an empty **array**.
2. Then we create a **for loop** with _i_ being equal to _number_ and then decrementing by one till it's no longer greater than 0.
3. Then all we have to do is **push** _i_ to _arr_ for each iteration of the loop.
4. return _arr_.

```javascript
  const reverse_sequ = (number) {
    let arr = [];
    for (let i=number; i>0; i--) {
    arr.push(i);
    } 
  return arr;
};
```

##C Sharp

For C# this one is pretty easy but we will need **Linq** again.
1. Call **Enumerable.Range** to build a **list** from 1 to _number_.
2. Call **Reverse** on it to reverse the order of your **list**.
3. Call **ToArray** on that to convert your **list** to an **array**.
4. Return the result.

```csharp
using System;
using System.Linq;

  public static int[] ReverseSeq(int number)
  {
    return Enumerable.Range(1, number).Reverse().ToArray();
  }
```